/**
 * Database service for PartiVotes
 * Provides methods to interact with the MongoDB database
 */
const { connectDB } = require('../db/connection');
const Poll = require('../db/models/Poll');
const Vote = require('../db/models/Vote');

// Initialize database connection
const initDatabase = async () => {
  return await connectDB();
};

// Poll methods
const pollService = {
  // Get all polls
  getPolls: async (filter = {}) => {
    try {
      return await Poll.find(filter).sort({ createdAt: -1 });
    } catch (error) {
      console.error('Error fetching polls:', error);
      throw error;
    }
  },
  
  // Get a single poll by ID
  getPoll: async (id) => {
    try {
      return await Poll.findById(id);
    } catch (error) {
      console.error(`Error fetching poll ${id}:`, error);
      throw error;
    }
  },
  
  // Create a new poll
  createPoll: async (pollData) => {
    try {
      const poll = new Poll(pollData);
      return await poll.save();
    } catch (error) {
      console.error('Error creating poll:', error);
      throw error;
    }
  },
  
  // Update a poll
  updatePoll: async (id, pollData) => {
    try {
      return await Poll.findByIdAndUpdate(id, pollData, { new: true });
    } catch (error) {
      console.error(`Error updating poll ${id}:`, error);
      throw error;
    }
  },
  
  // Delete a poll
  deletePoll: async (id) => {
    try {
      await Vote.deleteMany({ pollId: id }); // Delete associated votes
      return await Poll.findByIdAndDelete(id);
    } catch (error) {
      console.error(`Error deleting poll ${id}:`, error);
      throw error;
    }
  }
};

// Vote methods
const voteService = {
  // Get all votes for a poll
  getVotes: async (pollId) => {
    try {
      return await Vote.find({ pollId });
    } catch (error) {
      console.error(`Error fetching votes for poll ${pollId}:`, error);
      throw error;
    }
  },
  
  // Get a user's vote on a poll
  getUserVote: async (pollId, voter) => {
    try {
      return await Vote.findOne({ pollId, voter });
    } catch (error) {
      console.error(`Error fetching user vote for poll ${pollId}:`, error);
      throw error;
    }
  },
  
  // Create a new vote
  createVote: async (voteData) => {
    try {
      // Start a session for transaction
      const session = await Vote.startSession();
      session.startTransaction();
      
      try {
        // Create the vote
        const vote = new Vote(voteData);
        await vote.save({ session });
        
        // Update poll vote count
        await Poll.findByIdAndUpdate(
          voteData.pollId, 
          { $inc: { totalVotes: 1 } },
          { session }
        );
        
        // If it's a single choice vote, increment the option's vote count
        if (voteData.option) {
          await Poll.updateOne(
            { 
              _id: voteData.pollId,
              'options.text': voteData.option 
            },
            { 
              $inc: { 'options.$.votes': 1 } 
            },
            { session }
          );
        }
        
        // Commit the transaction
        await session.commitTransaction();
        session.endSession();
        
        return vote;
      } catch (error) {
        // Abort transaction on error
        await session.abortTransaction();
        session.endSession();
        throw error;
      }
    } catch (error) {
      console.error('Error creating vote:', error);
      throw error;
    }
  }
};

module.exports = {
  initDatabase,
  pollService,
  voteService
};
